% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cchn_rules.R, R/rule-add.R, R/rule-delete.R,
%   R/rule-get.R, R/rule-list.R
\name{cchn_rules}
\alias{cchn_rules}
\alias{cchn_rules_add}
\alias{cchn_pkg_rule_add}
\alias{cchn_rule_add}
\alias{cchn_pkg_rule_delete}
\alias{cchn_rule_delete}
\alias{cchn_pkg_rule_get}
\alias{cchn_rule_get}
\alias{cchn_pkg_rule_list}
\alias{cchn_rule_list}
\title{Notifications: add, list, get, delete notification rules}
\usage{
cchn_rules_add(rules, email, quiet = FALSE, ...)

cchn_pkg_rule_add(
  status = NULL,
  platform = NULL,
  time = NULL,
  regex = NULL,
  package = NULL,
  email = NULL,
  path = ".",
  quiet = FALSE,
  ...
)

cchn_rule_add(
  package,
  status = NULL,
  platform = NULL,
  time = NULL,
  regex = NULL,
  email = NULL,
  quiet = FALSE,
  ...
)

cchn_pkg_rule_delete(id, email = NULL, path = ".", ...)

cchn_rule_delete(id, email = NULL, quiet = FALSE, ...)

cchn_pkg_rule_get(id, email = NULL, path = ".", ...)

cchn_rule_get(id, email = NULL, quiet = FALSE, ...)

cchn_pkg_rule_list(email = NULL, path = ".", ...)

cchn_rule_list(email = NULL, quiet = FALSE, ...)
}
\arguments{
\item{rules}{(list) a list of rules. each element in the list must
be a named list, in which each must have a "package", and a set of
rules (see below)}

\item{email}{(character) email address to use for interaction with
the CRAN checks API. we use the email address in the maintainers slot
of the DESCRIPTION file of your working directory. you can supply an
email address instead}

\item{quiet}{(logical) suppress messages? default: \code{FALSE}}

\item{...}{Curl options passed to \link[crul:verb-GET]{crul::verb-GET}, \link[crul:verb-POST]{crul::verb-POST}, or
\link[crul:verb-DELETE]{crul::verb-DELETE}}

\item{status}{(character) a check status, one of: error, warn, note, fail}

\item{platform}{(character) a platform, a string to match against the
platform strings used by cran checks. e.g., "osx" would match any osx
platform check results, whereas you could limit the rule to just a single
specific platform by using the target platforms exact string
"r-oldrel-osx-x86_64". Leave as \code{NULL} (the default) to match all
platforms.}

\item{time}{(integer) number of days}

\item{regex}{(character) a regex string}

\item{package}{(character) a package name. if \code{NULL}, we attempt to
get the package name from the working directory, and fail out if there's
not a valid package structure/package name}

\item{path}{(character) path to a directory containing an R package}

\item{id}{(integer) a rule id. note that you can not get or delete
rules that are not yours. required}
}
\value{
\itemize{
\item \code{cchn_pkg_rule_add()}/\code{cchn_rule_add()}/\code{cchn_rules_add()}: message about
the rule added, and a note about using \code{cchn_rule_list()} to list your rules
\item \code{cchn_pkg_rule_get()}/\code{cchn_rule_get()}: list with elements \code{error} and
\code{data} (a list of the parts of the rule)
\item \code{cchn_pkg_rule_list()}/\code{cchn_rule_list()}: list with elements \code{error} and
\code{data} (a data.frame of all the rules associated with your email)
\item \code{cchn_pkg_rule_delete()}/\code{cchn_rule_delete()}: if deletion works, a
message saying "ok"
}
}
\description{
Notifications: add, list, get, delete notification rules
}
\details{
Functions prefixed with \code{cchn_pkg_} operate within a package
directory. That is, your current working directory is an R
package, and is the package for which you want to handle CRAN checks
notifications. These functions make sure that you are inside of
an R package, and use the email address and package name based
on the directory you're in.

Functions prefixed with just \code{cchn_} do not operate within a package.
These functions do not guess package name at all, but require the user
to supply a package name (for those functions that require a package name);
and instead of guessing an email address from your package, we guess email
from the cached cchecks email file.
\itemize{
\item \code{cchn_pkg_rule_add()}/\code{cchn_rule_add()}: add a rule, one rule per
function call
\item \code{cchn_rules_add()}: add many rules at once; no option for package context
\item \code{cchn_pkg_rule_get()}/\code{cchn_rule_get()}: get a rule by rule id (see
\code{cchn_pkg_rule_list()}/\code{cchn_rule_list()} to get ids; can only get rules for
the authenticated user)
\item \code{cchn_pkg_rule_list()}/\code{cchn_rule_list()}: list rules for the
authenticated user - \code{cchn_pkg_rule_list()} lists rules only for the package
in question, while \code{cchn_rule_list()} lists all rules for the user (email)
\item \code{cchn_pkg_rule_delete()}/\code{cchn_rule_delete()}: delete a rule by rule id
(only those for the authenticated user)
}
}
\section{example rules}{


Note that the first parameter \code{package} is left out for brevity
\itemize{
\item ERROR for at least 1 day across all platforms
\itemize{
\item \code{cchn_rule_add(status = 'error')}
}
\item ERROR for 3 days in a row across 2 or more platforms
\itemize{
\item \code{cchn_rule_add(status = 'error', time = 3, platform = 2)}
}
\item ERROR for 2 days in a row on all osx platforms
\itemize{
\item \code{cchn_rule_add(status = 'error', time = 2, platform = "osx")}
}
\item ERROR for 2 days in a row on all release R versions
\itemize{
\item \code{cchn_rule_add(status = 'error', time = 2, platform = "release")}
}
\item WARN for 4 days in a row on any platform except Solaris
\itemize{
\item \code{cchn_rule_add(status = 'warn', time = 4, platform = "-solaris")}
}
\item WARN for 2 days in a row across 9 or more platforms
\itemize{
\item \code{cchn_rule_add(status = 'warn', time = 2, platform = 10)}
}
\item NOTE on any osx platform
\itemize{
\item \code{cchn_rule_add(status = 'note', platform = "osx")}
}
\item NOTE on any platform
\itemize{
\item \code{cchn_rule_add(status = 'note')}
}
\item error details contain regex 'install'
\itemize{
\item \code{cchn_rule_add(regex = "install")}
}
}
}

\examples{
\dontrun{
## Workflow 1: within a package directory
# (x <- cchn_pkg_rule_list())
# if (length(x$data$id) > 0) {
#  cchn_pkg_rule_get(x$data$id[1])
#  cchn_pkg_rule_delete(x$data$id[1])
#  cchn_pkg_rule_get(id = x$data$id[1])
# }

## Workflow 2: not in a package directory
# (x <- cchn_rule_list())
# if (length(x$data$id) > 0) {
#  cchn_rule_get(x$data$id[1])
#  cchn_rule_delete(x$data$id[1])
#  cchn_rule_get(id = x$data$id[1])
# }

## cchn_pkg_rule_add: add a rule - guesses the package name
## you can specify the package name instead
# cchn_pkg_rule_add(status = "note", platform = 3,
#  email = "some-email")
## cchn_rule_add: add a rule - not in package context, must 
## specify the package name
# cchn_rule_add(package = "foobar", status = "note", platform = 3,
#  email = "some-email")

## cchn_pkg_rule_add: should guess package name and email
# cchn_pkg_rule_add(status = "note", platform = 3)

## cchn_rule_add: package name must be supplied. takes first email
## from cached emails.csv file, see `?cchn_register` for more
# cchn_rule_add(package = "foobar", status = "warn", platform = 2)

## cchn_rules_add: add many rules at once
## no package context here, email and package names must be given
# pkg <- "charlatan"
# rules <- list(
#   list(package = pkg, status = "warn"),
#   list(package = pkg, status = "error", time = 4)
# )
# cchn_rules_add(rules, "your-email", verbose = TRUE)
}
}
